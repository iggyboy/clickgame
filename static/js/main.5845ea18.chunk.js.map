{"version":3,"sources":["logo.svg","components/Card/index.js","components/Header/index.js","components/BigMeme/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","onClick","props","cb","id","className","style","width","margin","display","height","src","this","img","alt","React","Component","Header","justifyContent","score","BigMeme","textAlign","message","App","state","Tiles","validTiles","clickHandler","console","log","filter","tile","setState","CheckValid","lose","reset","shuffle","a","j","x","i","length","Math","floor","random","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0cAAAA,EAAOC,QAAU,IAA0B,kC,2LCMtBC,G,mMACP,IAAD,OACL,OACQ,yBAAKC,QAAS,kBAAM,EAAKC,MAAMC,GAAG,EAAKD,MAAME,KAAKC,UAAU,OAAOC,MAAO,CAAEC,MAAO,QAAYC,OAAQ,SAAUC,QAAS,iBACtH,yBAAKH,MAAO,CAAEC,MAAO,QAAYG,OAAQ,SAAaL,UAAU,eAAeM,IAAKC,KAAKV,MAAMW,IAAKC,IAAI,c,GAJ1FC,IAAMC,Y,OCHnBC,G,uLAEb,OACI,yBAAKX,MAAO,CACRG,QAAS,OACTS,eAAgB,gBACjBb,UAAU,gCACT,0BAAMA,UAAU,wBAAhB,gBACA,8BAAM,qCAAWO,KAAKV,MAAMiB,a,GARRJ,IAAMC,YCArBI,G,uLAEb,OACI,yBAAKf,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIC,MAAO,CAACe,UAAW,UAAWhB,UAAU,aAAaO,KAAKV,MAAMoB,e,GALnDP,IAAMC,YC+E5BO,E,2MAzEbC,MAAQ,CACNC,QACAC,WAAYD,EACZN,MAAO,EACPG,QAAS,iC,EAqBXK,aAAe,SAAAvB,GACbwB,QAAQC,IAAI,WAAazB,GACzB,IAAIsB,EAAa,EAAKF,MAAME,WAAWI,QAAO,SAAAC,GAE5C,GAAI3B,IAAO2B,EAAK3B,GACd,OAAO2B,KAGX,EAAKC,SAAS,CAAEN,WAAYA,IAC5B,EAAKO,WAAW7B,I,EAGlB6B,WAAa,SAAA7B,GACX,IAAI8B,GAAO,EADM,uBAEjB,YAAiB,EAAKV,MAAME,WAA5B,+CAAwC,CAClCtB,IADkC,QACtBA,KACd8B,GAAO,IAJM,mFAOJ,IAATA,EACF,EAAKC,QAGL,EAAKC,QAAQ,EAAKZ,MAAMC,Q,EAI5BU,MAAQ,WACNP,QAAQC,IAAI,SACZ,EAAKG,SAAS,CAAEN,WAAYD,IAC5B,EAAKO,SAAS,CAAEb,MAAO,IACvB,EAAKa,SAAS,CAACV,QAAS,0B,EAG1Bc,QAAU,SAAAC,GACR,IAAIC,EAAGC,EAAGC,EACV,IAAKA,EAAIH,EAAEI,OAAS,EAAGD,EAAI,EAAGA,IAC5BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIF,EAAEG,GACNH,EAAEG,GAAKH,EAAEC,GACTD,EAAEC,GAAKC,EAET,EAAKP,SAAS,CAAEP,MAAOY,IACvB,EAAKL,SAAS,CAACb,MAAQ,EAAKK,MAAML,MAAQ,IAC1C,EAAKa,SAAS,CAACV,QAAS,mC,wEA/DhB,IAAD,OAEP,OADAM,QAAQC,IAAIjB,KAAKY,MAAME,YAErB,6BACE,kBAAC,EAAD,CAAQP,MAAOP,KAAKY,MAAML,QAC1B,kBAAC,EAAD,CAASG,QAAWV,KAAKY,MAAMF,UAC/B,yBAAKhB,MAAO,CACVG,QAAS,OACTS,eAAgB,iBAEfN,KAAKY,MAAMC,MAAMoB,KAAI,SAAAd,GAAI,OACxB,kBAAC,EAAD,CAAMe,IAAKf,EAAK3B,GAAIA,GAAI2B,EAAK3B,GAAIS,IAAKkB,EAAKlB,IAAKV,GAAI,EAAKwB,wB,GAlBnDZ,IAAMC,WCIJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5845ea18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\n\r\n\r\n\r\nexport default class Card extends React.Component {\r\n    render() {\r\n        return (\r\n                <div onClick={() => this.props.cb(this.props.id)} className=\"card\" style={{ width: 150 + \"px\", margin: \"0 auto\", display: \"inline-block\" }}>\r\n                    <img style={{ width: 150 + \"px\", height: 150 + \"px\"}} className=\"card-img-top\" src={this.props.img} alt=\"meme\" />\r\n                </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nexport default class Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <nav style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-around\"\r\n            }} className=\"navbar navbar-light bg-light\">\r\n                <span className=\"navbar-brand mb-0 h1\">Rune-Clicker</span>\r\n                <span><b>Score: {this.props.score}</b></span>\r\n            </nav>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nexport default class BigMeme extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid\">\r\n                <div className=\"container\">\r\n                    <h1 style={{textAlign: \"center\"}} className=\"display-4\">{this.props.message}</h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Tiles from \"./tiles.json\";\nimport Header from './components/Header';\nimport BigMeme from \"./components/BigMeme\"\n\nclass App extends React.Component {\n  state = {\n    Tiles,\n    validTiles: Tiles,\n    score: 0,\n    message: \"Make your choice, adventurer!\"\n  }\n  render() {\n    console.log(this.state.validTiles)\n    return (\n      <div>\n        <Header score={this.state.score}></Header>\n        <BigMeme message = {this.state.message}></BigMeme>\n        <div style={{\n          display: \"flex\",\n          justifyContent: \"space-around\"\n        }}>\n          {this.state.Tiles.map(tile => (\n            <Card key={tile.id} id={tile.id} img={tile.img} cb={this.clickHandler} />\n          ))}\n        </div>\n      </div>\n    )\n\n  }\n\n  clickHandler = id => {\n    console.log(\"clicked \" + id);\n    let validTiles = this.state.validTiles.filter(tile => {\n      // console.log(id);\n      if (id !== tile.id) {\n        return tile;\n      }\n    })\n    this.setState({ validTiles: validTiles })\n    this.CheckValid(id)\n  }\n\n  CheckValid = id => {\n    let lose = true;\n    for (let tile of this.state.validTiles) {\n      if (id === tile.id) {\n        lose = false;\n      }\n    }\n    if (lose === true) {\n      this.reset()\n    }\n    else {\n      this.shuffle(this.state.Tiles)\n    }\n  }\n\n  reset = () => {\n    console.log(\"reset\")\n    this.setState({ validTiles: Tiles })\n    this.setState({ score: 0 });\n    this.setState({message: \"You chose... poorly!\"})\n  }\n\n  shuffle = a => {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    this.setState({ Tiles: a });\n    this.setState({score : this.state.score + 1})\n    this.setState({message: \"Make your choice, adventurer!\"})\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}